<pre class="metadata">
Title: Magnetometer
Level: 1
Status: ED
ED: https://w3c.github.io/magnetometer/
Shortname: magnetometer
TR: https://www.w3.org/TR/magnetometer/
Editor: Anssi Kostiainen 41974, Intel Corporation, https://intel.com/
Editor: Rijubrata Bhaumik 80407, Intel Corporation, https://intel.com/
Group: dap
Abstract:
  This specification defines a concrete sensor interface to measure magnetic
  field in the X, Y and Z axis.
Version History: https://github.com/w3c/magnetometer/commits/gh-pages/index.bs
!Bug Reports: <a href="https://www.github.com/w3c/magnetometer/issues/new">via the w3c/magnetometer repository on GitHub</a>
Indent: 2
Repository: w3c/magnetometer
Markup Shorthands: markdown on
Inline Github Issues: true
!Test Suite: <a href="https://github.com/w3c/web-platform-tests/tree/master/magnetometer">web-platform-tests on GitHub</a>
Boilerplate: omit issues-index, omit conformance
Default Biblio Status: current
</pre>
<pre class="anchors">
urlPrefix: https://w3c.github.io/permissions/; spec: PERMISSIONS
  type: dfn
    text: permission; url: idl-def-Permission
    text: associated PermissionDescriptor;  url: dfn-associated-permissiondescriptor
urlPrefix: https://w3c.github.io/sensors; spec: GENERIC-SENSOR
  type: dfn
    text: high-level
    text: sensor subclass
    text: sensorreading subclass
    text: default sensor
    text: supported reporting mode; url: supported-reporting-modes
    text: auto
    text: construct a sensor object; url: construct-sensor-object
</pre>

Introduction {#intro}
============

Magnetometer extends the Generic Sensor API [[GENERIC-SENSOR]]
to provide information about the <a>geomagnetic field</a>
as detected by the device's primary magnetometer sensor.
The magnetometer sensor measures the ambient <a>geomagnetic field</a> for all three
physical axes (x, y, z) in μT (micro Tesla).

<dfn>Geomagnetic field</dfn> is defined as the magnetic force field that surrounds the Earth.
It is attributed to the combined effects of the planetary rotation and the movement of molten iron in the Earth's core.


A magnetoresistive component (permalloy) is one which changes resistance in proportion to the strength of a magnetic field along its axis.
The 3 axis magnetometer usually found in mobile phones, have 3 such components oriented such that each one is orthogonal to the other two,
one each in the X, Y and Z directions in the device's <a>local coordinate system</a>.
Each individual magnetoresistive element senses only the component of the magnetic field parallel to the element axis and ignores field components orthogonal to the element axis.


Examples {#examples}
========

<div class="example">
    <pre highlight="js">
    let sensor = new Magnetometer();
    sensor.start();

    sensor.onchange = function(event) {
        console.log("Magnetic field along the X-axis " + event.reading.x);
        console.log("Magnetic field along the Y-axis " + event.reading.y);
        console.log("Magnetic field along the Z-axis " + event.reading.z);
    };

    sensor.onerror = event => console.log(event.error.name, event.error.message);
    </pre>
</div>

Security and Privacy Considerations {#security-and-privacy}
===================================

There are no specific security and privacy considerations
beyond those described in the Generic Sensor API [[!GENERIC-SENSOR]].

Model {#model}
=====

The Magnetometer's associated <a>Sensor subclass</a>
is the {{Magnetometer}} class.

The Magnetometer's associated <a>SensorReading subclass</a>
is the {{MagnetometerReading}} class.

The Magnetometer has a <a>default sensor</a>,
which is the device's main magnetometer sensor.

The Magnetometer has a single <a>supported reporting mode</a>
which is "<a>periodic</a>".

The Magnetometer's <a>permission</a> name is `"magnetometer"`.
It has no <a>associated PermissionDescriptor</a>.

The Magnetometer has an associated abstract operation
to <dfn>retrieve the sensor permission</dfn> which
must simply return a <a>permission</a> whose name is "magnetometer".

The Magnetometer has an associated abstract operation
to <dfn lt="Construct SensorReading Object">construct a SensorReading object</dfn>
which creates a new {{MagnetometerReading}} object and sets each of its
<a attribute for="MagnetometerReading">x</a>,
<a attribute for="MagnetometerReading">y</a> and
<a attribute for="MagnetometerReading">z</a> attributes to zero.

The {{MagnetometerReading}}'s attribute values must be in μT (micro Tesla),
expressed in a three-dimentional Cartesian <a>local coordinate system</a>
defined by the device.

The sign of the <a>geomagnetic field</a> values must be according to the
right-hand convention in a <a>local coordinate system</a> defined by the device.

Note: The <dfn>local coordinate system</dfn> of a mobile device is usually defined relative to
the device's screen when the device in its default orientation (see figure below).



<img src="magnetometer_coordinate_system.png" srcset="magnetometer_coordinate_system.svg" alt="Magnetometer coordinate system.">


API {#api}
===

The Magnetometer Interface {#magnetometer-interface}
--------------------------------

<pre class="idl">
  [Constructor(optional SensorOptions sensorOptions)]
  interface Magnetometer : Sensor {
    readonly attribute boolean isRaw;
  };

  dictionary MagnetometerSensorOptions : SensorOptions {
    boolean isRaw = false;
  };
</pre>

To <dfn>Construct an Magnetometer Object</dfn> the user agent must invoke the
<a>construct a Sensor object</a> abstract operation.
Depending upon the value of <a attribute for="Magnetometer">isRaw</a>, the reading should be
either of type {{MagnetometerReading}} or {{MagnetometerRawReading}}.

The MagnetometerReading Interface {#magnetometer-reading-interface}
---------------------------------------

<pre class="idl">
  [Constructor(MagnetometerReadingInit magnetometerReadingInit)]
  interface MagnetometerReading : SensorReading {
      readonly attribute double x;
      readonly attribute double y;
      readonly attribute double z;
  };

  dictionary MagnetometerReadingInit {
    double x = 0;
    double y = 0;
    double z = 0;
  };
</pre>

The MagnetometerRawReading Interface {#magnetometer-raw-reading-interface}
---------------------------------------

<pre class="idl">
  [Constructor(MagnetometerRawReadingInit magnetometerRawReadingInit)]
  interface MagnetometerRawReading : SensorReading {
      readonly attribute double x;
      readonly attribute double y;
      readonly attribute double z;
      readonly attribute double xBias;
      readonly attribute double yBias;
      readonly attribute double zBias;
  };

  dictionary MagnetometerRawReadingInit {
    double x = 0;
    double y = 0;
    double z = 0;
    double xBias = 0;
    double yBias = 0;
    double zBias = 0;
  };
</pre>


### The MagnetometerReading constructor ### {#magnetometer-reading-constructor}

The {{MagnetometerReading}} constructor accepts {{MagnetometerReadingInit}} dictionary that is used for initialization of {{MagnetometerReading}} attributes.


The {{MagnetometerRawReading}} constructor accepts {{MagnetometerRawReadingInit}} dictionary that is used for initialization of {{MagnetometerRawReading}} attributes.



### The MagnetometerReading attributes ### {#magnetometer-reading-attribute}

The <a attribute for="MagnetometerReading">x</a> attribute of the {{MagnetometerReading}}
interface represents represents the <a>geomagnetic field</a> around X-axis.

The <a attribute for="MagnetometerReading">y</a> attribute of the {{MagnetometerReading}}
interface represents represents the <a>geomagnetic field</a> around Y-axis.

The <a attribute for="MagnetometerReading">z</a> attribute of the {{MagnetometerReading}}
interface represents represents the <a>geomagnetic field</a> around Z-axis.

### The MagnetometerRawReading attributes ### {#magnetometer-raw-reading-attribute}

The <a attribute for="MagnetometerRawReading">x</a>, <a attribute for="MagnetometerRawReading">y</a>
<a attribute for="MagnetometerRawReading">z</a> attributes denote uncalibrated magnetic strength around the 3 different axes.

The {{MagnetometerRawReading}} interface also has
<a attribute for="MagnetometerRawReading">xBias</a>, <a attribute for="MagnetometerRawReading">yBias</a> and
<a attribute for="MagnetometerRawReading">zBias</a>, denoting the hard iron bias which is the distortion of magnetic field strength due to presence of magnet or similar material.


Limitations of Magnetometer Sensors {#limitations-magnetometer}
==============

<em>This section is non-normative</em>.

The direction and magnitude of the Earth’s field changes with location, latitude in particular. For example,
the magnitude is lowest near the equator and highest near the poles.
Some hard-iron interference, meaning presence of permanent magnets (e.g. magnets in the speaker of a phone) in the vicinity of the sensor
also affects the accuracy of the reading.
Presence of electronic items, laptops, batteries, etc also contribute to the soft-iron interference.
Flight Mode option in mobile phones might help in decreasing the electro magnetic interference.

In addition to the above spatial variations of the <a>geomagnetic field</a>, time based variations,
like solar winds or magnetic storms, also distort the magnetosphere or external magnetic field of the earth.


Compass Heading Using Magnetometers {#compass}
======================

Compasses, instruments that align themselves with the magnetic poles of the Earth, have been used in navigation for centuries.
The earth’s rotational axis defines the geographic north and south poles that we use for
map references. It turns out that there is a discrepancy of around 11.5 degrees (around 1000 miles) between the geographic poles and the
magnetic poles. <a>Declination angle</a> is applied to the magnetic direction to correct for this situation.

If the device is always level to the earth’s surface, compass heading can be determined by using just the
{{x}} and {{y}} component of the earth’s magnetic field, that
is, the directions planar with the earth’s surface.
To determine geographic north (or true north) heading, add the appropriate <a>declination angle</a>.

<dfn>Magnetic declination</dfn> or <dfn>declination angle</dfn> is the angle on the horizontal plane between magnetic north and the true north and depends on the position on the Earth's surface, and changes over time.
By convention, declination is positive when magnetic north is east of true north, and negative when it is to the west. You can get real time value for <a>magnetic declination</a> e.g. using the <a href="http://www.ngdc.noaa.gov/geomag-web/calculators/declinationHelp">Magnetic declination calculator</a>
provided by the National Oceanic and Atmospheric Administration (NOAA).

Magnetic north calculation is simple:

<div class="example">
  <pre highlight="js">
    var headingDegrees = Math.atan2(event.reading.y,
                                    event.reading.x) * (180 / Math.PI);

    console.log('Heading in degrees: ' + headingDegrees);
  </pre>
</div>

To get geographic north (or true north) that considers the
<a>magnetic declination</a> at the given latitude and longitude,
further work is required:

<div class="example">
  <pre highlight="js">
    // First, get the latitude and longitude (omitted for brevity).
    var latitude = 0, longitude = 0;

    // Then, get the magnetic declination using your favorite web service.
    var base = 'http://www.ngdc.noaa.gov/geomag-web/calculators/calculateDeclination';
    fetch(base + '?lat1=' + latitude + '&lon1=' + longitude + '&resultFormat=csv')
      .then(response => response.text()).then(text => {
        var declinationDegrees =
            parseFloat(text.replace(/^#.*$/gm, '').trim().split(',')[4]);
        // Compensate for the magnetic declination to get the true north.
        console.log('True heading in degrees: ' + (headingDegrees + declinationDegrees));
    });
    </pre>
</div>


If the device is not level to the Earth’s surface, we need to apply various
tilt compensation techniques for which we need a 3-axis accelerometer.
A specification for orientation sensor, which is a fusion of the accelerometer
and magnetometer sensors, is required to implement this particular use case.


Acknowledgements {#acknowledgements}
================

Tobie Langel for the work on Generic Sensor API.

Conformance {#conformance}
===========

Conformance requirements are expressed with a combination of
descriptive assertions and RFC 2119 terminology. The key words "MUST",
"MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
"RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this
document are to be interpreted as described in RFC 2119.
However, for readability, these words do not appear in all uppercase
letters in this specification.

All of the text of this specification is normative except sections
explicitly marked as non-normative, examples, and notes. [[!RFC2119]]

A <dfn>conformant user agent</dfn> must implement all the requirements
listed in this specification that are applicable to user agents.

The IDL fragments in this specification must be interpreted as required for
conforming IDL fragments, as described in the Web IDL specification. [[!WEBIDL]]
